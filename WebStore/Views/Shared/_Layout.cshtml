@using Microsoft.AspNetCore.Identity;

@inject SignInManager<WebStore.Models.DbModel.AccountUser> SignInManager
@inject UserManager<WebStore.Models.DbModel.AccountUser> UserManager


@inject List<WebStore.Models.DbModel.User> users;
@*@inject List<WebStore.Models.DbModel.Bascket> basckets;*@




<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <title>HandMade_shop </title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" />
</head>
<body>
    <header id="header" style="background-color: cadetblue;">
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container">
                <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index" title="HandMade_shop">
                    <img Id="imgLogo1" src="~/images/homeLogo.jpg" />
                </a>
                @*<button class="navbar-toggler" type="button" data-toggle="collapse" data-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                            aria-expanded="false" aria-label="Toggle navigation">
                        <span class="navbar-toggler-icon"></span>
                    </button>*@
                <div class="navbar-collapse collapse">
                    <ul class="nav navbar-nav">
                        @{
                            var userName = UserManager.GetUserName(User);

                            string userRoles = "";
                            if (User.Identity.IsAuthenticated)
                            {

                                if (User.IsInRole("Admin"))
                                {
                                    userRoles = "Admin";
                                }
                                else if (User.IsInRole("User"))
                                {
                                    userRoles = "User";
                                }
                            }
                            if (userRoles != "" || userName != null)
                            {
                                var i = ViewBag.User;
                                var r = User.Identity.Name;


                            }
                            if (userRoles == "Admin")
                            {

                                <li><a style=" margin-right: 20px;" asp-action="UserList" asp-controller="Roles">Кабінет </a> </li>

                                //  <li><a style=" margin-right: 20px;" asp-action="Index" asp-controller="Roles">Users </a> </li>
                            }
                        }


                        <li>@Html.ActionLink("Контакти", "Contact", "Home")</li>

                        @*<li><a style=" margin-right: 20px;" asp-action="Index" asp-controller="Roles">Users </a> </li>*@




                    </ul>
                    @await Html.PartialAsync("_LoginPartial")

                    @*{



                            var accountUser = await UserManager.FindByNameAsync(userName);
                            WebStore.Models.DbModel.User curentUser = null;
                            List<WebStore.Models.DbModel.Bascket> userBasckets = null;
                            if (accountUser != null)
                            {
                                curentUser = users
                                            .FirstOrDefault(u => u.AccountUser.Id == accountUser.Id);

                                userBasckets = basckets.Where(b => b.UserId == curentUser.Id).ToList();
                            }


                        }*@
                    @*<div id="conteiner">
                            <a asp-action="Index" asp-controller="Basket" asp-route-userId="@curentUser?.Id">
                                <img style="width: 5%;" src="~/images/basket.PNG" />(@userBasckets.Count())
                            </a>
                        </div>*@

                </div>

            </div>
        </nav>
    </header>
    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2020 - HandMade_shop
        </div>
    </footer>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    @RenderSection("Scripts", required: false)
</body>


</html>
<style>
    #imgLogo1 {
        width: 20%;
        border: 1px solid #ddd;
        border-radius: 4px;
        padding: 5px;
    }
    /*#container {
        background-color: aliceblue;
        border: 1px solid #ddd;
        border-radius: 4px;
        padding: 25px;
    }*/
</style>


@*привет. Ошибка "No service for type has been registered" указывает, что в Startup.ConfigureServices() не добавлена зависимость. Делать inject обычного списка не очень логично, я бы добавил класс который будет выгружать информацию для Layout.

    1. Создаем класс LayoutDataService. Для примера сделал с интерфейсом, можно обойтись без него.
    2. Добавляем в конструктор необходимые для выгрузки зависимости.
    Для доступа к пользователю можно использовать HttpContext (такой же как в контроллере). В asp net для этого есть специальный IHttpContextAccessor.
    3. Регистрируем в Startup.ConfigureServices() наш класс
    4. Регистрируем в Startup.ConfigureServices() IHttpContextAccessor, как указано в оф. документации https://docs.microsoft.com/en-us/aspnet/core/fundamentals/http-context?view=aspnetcore-5.0
    5. В LayoutDataService можно в дальнейшем добавить, например, контекст базы. Всё как обычно - зависимость добавить к конструктор и зарегистрировать в Startup.
       IHttpContextAccessor -  https://docs.microsoft.com/en-us/aspnet/core/fundamentals/http-context?view=aspnetcore-5.0
*@

